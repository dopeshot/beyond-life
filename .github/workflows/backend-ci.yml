name: backend-pipeline

on:
  push:
    branches:
      #- "stable"
      - "main"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"

jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: install npm dependencies
        run: npm ci --no-audit --cache ~/.npm

      - name: Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-modules-${{ hashFiles('package-lock.json') }}

  tests:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        command: ["test", "test:e2e"]
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: node modules
        run: npm ci --audit:false --cache ~/.npm --prefer-offline

      - name: tests
        run: npm run ${{ matrix.command }}

  update-types:
    runs-on: ubuntu-latest
    needs: [tests]
    defaults:
      run:
        shell: bash
    outputs:
      new-hash: ${{ steps.type-hasher-old.outputs.OLD_HASH }}
      old-hash: ${{ steps.type-hasher-new.outputs.NEW_HASH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load cache
        id: load-cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: node modules
        working-directory: ./backend
        run: npm ci --audit:false --cache ~/.npm --prefer-offline

      - name: Hash existing
        run: echo "OLD_HASH=$(sha1sum ./frontend/src/generated/schema.ts)" >> "$GITHUB_OUTPUT"
        id: type-hasher-old

      - name: Generate types
        run: sh typegen.sh

      - name: Hash created
        run: echo "NEW_HASH=$(sha1sum ./frontend/src/generated/schema.ts)" >> "$GITHUB_OUTPUT"
        id: type-hasher-new

      - name: Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: frontend/src/generated/schema.ts
          key: types-${{ github.sha }}

  commit-types:
    needs: [update-types]
    if: ${{ needs.update-types.outputs.old-hash }} != ${{ needs.update-types.outputs.new-hash }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_PAT }}

      - name: Load cache
        id: cache
        uses: actions/cache@v3
        with:
          path: frontend/src/generated/schema.ts
          key: types-${{ github.sha }}
          
      - name: Commit
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add frontend/src/generated/schema.ts
          git commit -m "generated"
          
      - name: Push
        run: git push


  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: [tests]
    strategy:
      matrix:
        platform: ["linux/amd64", "linux/arm64"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Arm support
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Extract branch name and replace / with _ as slashes are invalid as image tags
      - name: Extract branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | tr '/' '_')"
        id: extract_branch

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          tags: ghcr.io/dopeshot/beyond-life/backend:${{ steps.extract_branch.outputs.branch }}
          platforms: ${{ matrix.platform }}
          push: true
          labels: |
            org.opencontainers.image.source: https://github.com/dopeshot/beyond-life 
            org.opencontainers.image.description: Backend for beyond life
