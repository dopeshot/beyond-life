name: frontend-pipeline

on:
  push:
    branches:
      - "stable"
      - "main"
  pull_request:
    branches: [main]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-ci.yml"

jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: install npm dependencies
        run: npm ci --no-audit --cache ~/.npm

      - name: Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-modules-${{ hashFiles('package-lock.json') }}

  tests:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        # Run arm and amd build separately 
        version: ["te:cli", "tc:cli"]
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: node modules
        run: npm ci --audit:false --cache ~/.npm --prefer-offline

      - name: Cypress run
        uses: cypress-io/github-action@v5
        timeout-minutes: 15
        with:
          working-directory: ./frontend
          build: npm run build
          start: npm start
          command: npm run ${{ matrix.version }}
          
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-reports
          path: |
            frontend/cypress/results/*
            frontend/cypress/reports/*
            frontend/cypress/screenshots/*
            frontend/cypress/videos/*
            frontend/coverage

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: [tests]
    strategy:
      matrix:
        # Run arm and amd build separately 
        version: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Arm support
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Extract branch name and replace / with _ as slashes are invalid as image tags
      - name: Extract branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | tr '/' '_')"
        id: extract_branch

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          tags: ghcr.io/dopeshot/beyond-life/frontend:${{ steps.extract_branch.outputs.branch }}
          platforms: ${{ matrix.version }}
          push: true
          labels: |
            org.opencontainers.image.source: https://github.com/dopeshot/beyond-life 
            org.opencontainers.image.description: Frontend for beyond life
